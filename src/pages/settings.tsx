import React from "react";
import { type NextPage } from "next";
import Head from "next/head";
import Toast from '../components/settingspage/toast';
import ToggleSwitch from '../components/settingspage/toggle-switch';
import BackArrowButton from '../components/settingspage/back-arrow-button';
import { ThemeContext } from './_app';

const useLocalStorageToggle = (key: string, initial: boolean) => {
  const [value, setValue] = React.useState(() => {
    if (typeof window === 'undefined') return initial;
    const stored = window.localStorage.getItem(key);
    return stored !== null ? stored === 'true' : initial;
  });
  const setAndStore = (val: boolean) => {
    setValue(val);
    if (typeof window !== 'undefined') {
      window.localStorage.setItem(key, val.toString());
    }
  };
  return [value, setAndStore] as const;
};

const Settings: NextPage = () => {
  const { themeEnabled, setThemeEnabled } = React.useContext(ThemeContext);
  const [notificationEnabled, setNotificationEnabled] = useLocalStorageToggle('notificationEnabled', false);
  const [autoLocationEnabled, setAutoLocationEnabled] = useLocalStorageToggle('autoLocationEnabled', false);
  const [toast, setToast] = React.useState<{ show: boolean; message: string }>({ show: false, message: '' });
  const showToast = (message: string) => {
    setToast({ show: true, message });
  };
  const closeToast = () => setToast({ show: false, message: '' });
  const [mounted, setMounted] = React.useState(false);
  React.useEffect(() => {
    setMounted(true);
  }, []);
  React.useEffect(() => {
    if (typeof window !== 'undefined') {
      const root = window.document.documentElement;
      if (themeEnabled) {
        root.classList.add('dark');
      } else {
        root.classList.remove('dark');
      }
    }
  }, [themeEnabled]);
  if (!mounted) return null;

  return (
    <>
      <Toast message={toast.message} show={toast.show} onClose={closeToast} />
      <Head>
        <title>Settings</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="settings-container flex flex-col items-center justify-center min-h-screen w-full overflow-hidden">
        <main className="max-w-screen-sm mx-auto flex flex-col min-h-[100dvh] justify-center relative gap-y-4 bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 w-full overflow-hidden">
          <div className="settings-column flex flex-col gap-4 w-full rounded-lg shadow-md p-2 sm:px-4 md:px-8 lg:px-12 xl:px-16 pt-0 pb-0">
            <div className="w-full flex flex-row items-center justify-between py-2 sm:py-3 md:py-4 lg:py-6 xl:py-8 border-b gap-2 sm:gap-4 lg:gap-6 xl:gap-8">
              <span className="text-base sm:text-lg md:text-xl lg:text-2xl xl:text-3xl font-medium">Notifications</span>
              <div className="flex items-center">
                <ToggleSwitch checked={notificationEnabled} onChange={checked => { setNotificationEnabled(checked); showToast(`Notifications ${checked ? 'enabled' : 'disabled'}`); }} id="notification-toggle" />
              </div>
            </div>
            <div className="w-full flex flex-row items-center justify-between py-2 sm:py-3 md:py-4 lg:py-6 xl:py-8 border-b gap-2 sm:gap-4 lg:gap-6 xl:gap-8">
              <span className="text-base sm:text-lg md:text-xl lg:text-2xl xl:text-3xl font-medium">Auto location</span>
              <div className="flex items-center">
                <ToggleSwitch checked={autoLocationEnabled} onChange={checked => { setAutoLocationEnabled(checked); showToast(`Auto location ${checked ? 'enabled' : 'disabled'}`); }} id="auto-location-toggle" />
              </div>
            </div>
            <div className="w-full flex flex-row items-center justify-between py-2 sm:py-3 md:py-4 lg:py-6 xl:py-8 border-b gap-2 sm:gap-4 lg:gap-6 xl:gap-8">
              <span className="text-base sm:text-lg md:text-xl lg:text-2xl xl:text-3xl font-medium">{themeEnabled ? 'Dark mode enabled' : 'Light mode enabled'}</span>
              <div className="flex items-center">
                <ToggleSwitch checked={themeEnabled} onChange={checked => { setThemeEnabled(checked); showToast(checked ? 'Dark mode enabled' : 'Light mode enabled'); }} id="theme-toggle" />
              </div>
            </div>
            <div className="w-full flex items-center justify-center py-2 sm:py-4">
              <BackArrowButton />
            </div>
          </div>
        </main>
      </div>
    </>
  );
};

export default Settings;